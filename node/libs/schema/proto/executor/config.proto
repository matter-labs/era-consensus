// Config for the executor binary.
// Having a protobuf definition of the config allows gives
// us a backward compatibility checker (for free), which would
// be hard to obtain if it was specified just in the rust code.
//
// Executor binary expects this config in a JSON format,
// specified in https://protobuf.dev/programming-guides/proto3/#json
// You can run "cargo run -p tools --bin localnet_config" to see how
// a config should look like.
//
// Our code uses a subset of protobuf syntax, which forces us to
// mark all fields as "optional". The fields which are in fact required
// have a comment with "[required]" annotation.
// 
// For config readability and ease of use, some of the primitive types are
// encoded as strings. Fields of these types have a comment with the name of the type.
// Here is the list of string-encoded types and their corresponding string formats:
//
// IpAddr - TCP socket address, encoded as a string of the form "IP:port".
//   Both IPv4 and IPv6 are supported.
//   examples: "203.0.113.7:3456", "[2001:DB8::1]:4567"
//
// ValidatorPublicKey - public key of the validator (consensus participant) of the form "validator:public:<signature scheme>:<hex encoded key material>"
//   Currently only bn254 signature scheme is supported for validators.
//   example: "validator:public:bn254:4b0c4697f0a35eab30f63684ae4611f3c1d631eecfd97237e2345a9b3d0c472dbb16c49b793beceaab0cdd89cda6ff1099bd1aaf1ad6cabde9a15793cc09b407"
//
// NodePublicKey - public key of the node (gossip network participant) of the form "node:public:<signature scheme>:<hex encoded key material>"
//   Currently only ed25519 signature scheme is supported for nodes.
//   example: "node:public:ed25519:d36607699a0a3fbe3de16947928cf299484219ff62ca20f387795b0859dbe501"
// 
// FinalBlock - hex encoded serialized roles.validator.FinalBlock.
//   Used to specify the genesis block of the chain.
//   This blob of data is not customizable and we don't want to impose
//   json-level backward compatibility on anything else but the configs.
//   TODO(gprusak): either don't include it at all (derive genesis purely from
//     the validator set) or move it to a separate config file.
syntax = "proto3";

package executor.config;

// (public key, ip address) of a gossip network node. 
message NodeAddr {
  optional string key = 1; // [required] NodePublicKey
  optional string addr = 2; // [required] IpAddr
}

// Config of the consensus network.
message ConsensusConfig {
  optional string key = 1; // [required] ValidatorPublicKey
  optional string public_addr = 2; // [required] IpAddr
}

// Config of the gossip network.
message GossipConfig {
  // Public key of this node. It uniquely identifies the node.
  // It should match the secret key provided in the `node_key` file.
  optional string key = 1; // [required] NodePublicKey
  // Limit on the number of inbound connections outside
  // of the `static_inbound` set.
  optional uint64 dynamic_inbound_limit = 2; // [required]
  // Inbound connections that should be unconditionally accepted.
  repeated string static_inbound = 3; // NodePublicKey
  // Outbound connections that the node should actively try to
  // establish and maintain.
  repeated NodeAddr static_outbound = 4;
}

// Top-level executor config.
message ExecutorConfig {
  // IP:port to listen on, for incoming TCP connections.
  // Use `0.0.0.0:<port>` to listen on all network interfaces (i.e. on all IPs exposed by this VM).
  optional string server_addr = 1; // [required] IpAddr
  
  // Gossip network config.
  optional GossipConfig gossip = 4; // [required]
  
  // Genesis block of the blockchain.
  optional string genesis_block = 5; // [required] FinalBlock
  // Public keys of all validators.
  repeated string validators = 6; // [required] ValidatorPublicKey
}

// Node configuration including executor configuration, optional validator configuration,
// and application-specific settings (e.g. metrics scraping).
message NodeConfig {
  // Executor configuration.
  optional ExecutorConfig executor = 1; // [required]

  // IP:port to serve metrics data for scraping.
  // Use `0.0.0.0:<port>` to listen on all network interfaces.
  // If not set, metrics data won't be served.
  optional string metrics_server_addr = 2; // [optional] IpAddr

  // Consensus network config.
  optional ConsensusConfig consensus = 3; // [optional]
}
