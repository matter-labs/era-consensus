syntax = "proto3";

package network.gossip;

import "roles/node.proto";
import "roles/validator.proto";

// First message exchanged in the encrypted session.
message Handshake {
  optional roles.node.Signed session_id = 1;
  optional bool is_static = 2;
}

message SyncValidatorAddrsReq {}

message SyncValidatorAddrsResp {
  // Signed roles.validator.Msg.net_address.
  repeated roles.validator.Signed net_addresses = 1;
}

// Current block sync state of a node periodically sent by a node.
message SyncState {
  // First L2 block that the node has locally.
  // Will be always 0 until state pruning is introduced.
  optional roles.validator.CommitQC first_stored_block = 1;
  // The upper bound (inclusive) of the contiguous L2 block range
  // starting from first_stored_block_number. The node has all L2 blocks
  // in this range, but misses some L2 blocks beyond it.
  optional roles.validator.CommitQC last_contiguous_stored_block = 2;
  // Certified header of the last L2 block that the node has locally.
  optional roles.validator.CommitQC last_stored_block = 3;
}

// Response to `SyncState` acknowledging its processing.
message SyncStateResponse {
  // intentionally empty
}

// Asks the server to send an L2 block (including its transactions).
message GetBlockRequest {
  // Number of the L2 block to send.
  optional uint64 number = 1;
}

// Response to a `GetBlockRequest` containing a block or a reason it cannot be retrieved.
message GetBlockResponse {
  // Errors returned from a `GetBlockResponse`.
  //
  // Note that these errors don't include network-level errors, only app-level ones.
  message Error {
    // Reason processing the request has failed.
    optional ErrorReason reason = 1;
  }

  // Reason processing a `GetBlockRequest` has failed.
  enum ErrorReason {
    // Transient error: the node doesn't have the requested L2 block,
    // but plans to get it in the future by syncing.
    NOT_SYNCED = 0;
  }

  // Result of processing a `GetBlockRequest`.
  oneof result {
    // The request was successfully processed.
    roles.validator.FinalBlock block = 1;
    // The request resulted in an error.
    Error error = 2;
  }
}
