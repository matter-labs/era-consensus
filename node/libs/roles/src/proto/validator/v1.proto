syntax = "proto3";

package zksync.roles.validator;

import "zksync/roles/validator/keys.proto";
import "zksync/roles/validator/genesis.proto";
import "zksync/std.proto";

message BlockHeader {
  // Sequential number of the block = parent.number + 1.
  optional uint64 number = 1; // required
  // Hash of the block payload.
  optional PayloadHash payload = 2; // required
}

message FinalBlock {
  optional bytes payload = 1; // required
  optional CommitQC justification = 2; // required
}

message View {
  reserved 1,2;
  reserved "protocol_version","fork";

  optional GenesisHash genesis = 4; // required
  optional uint64 number = 3; // required; ViewNumber
}

message ReplicaCommit {
  optional View view = 1; // required
  optional BlockHeader proposal = 2; // required
}

message ReplicaTimeout {
  optional View view = 1; // required
  optional ReplicaCommit high_vote = 2; // optional 
  optional CommitQC high_qc = 3; // optional
}

message ReplicaNewView {
  optional ProposalJustification justification = 1; // required
}

message LeaderProposal {
  optional bytes proposal_payload = 1; // optional (depending on justification)
  optional ProposalJustification justification = 2; // required
}

message CommitQC {
  optional ReplicaCommit msg = 1; // required
  optional std.BitVector signers = 2; // required
  optional AggregateSignature sig = 3; // required
}

message TimeoutQC {
  optional View view = 4; // required
  repeated ReplicaTimeout msgs = 1; // required
  repeated std.BitVector signers = 2; // required
  optional AggregateSignature sig = 3; // required
}

message ProposalJustification {
  oneof t { // required
    CommitQC commit_qc = 1;
    TimeoutQC timeout_qc = 2;
  }
}

message Phase {
  oneof t { // required
    std.Void prepare = 1;
    std.Void commit = 2;
    std.Void timeout = 3;
  }
}
