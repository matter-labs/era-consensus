syntax = "proto3";

package zksync.roles.validator;

import "zksync/std.proto";

message Genesis {
  reserved 1,2;
  reserved "fork","validators";
  optional uint64 chain_id = 5; // required
  optional uint64 fork_number = 6; // required; ForkNumber
  optional uint64 first_block = 7; // required; BlockNumber
 
  // These properties are expected to be overwritten each epoch.
  // We will either remove them entirely, or keep them for the initial epoch.
  optional uint32 protocol_version = 8; // required; ProtocolVersion
  repeated WeightedValidator validators_v1 = 3;
  optional LeaderSelectionMode leader_selection = 4; // required
}

message LeaderSelectionMode {
  oneof mode {
    RoundRobin round_robin = 1;
    Sticky sticky = 2;
    Weighted weighted = 3;
  }
  message RoundRobin{}
  message Sticky{
    optional PublicKey key = 1; // required
  }
  message Weighted{}
}


message GenesisHash {
  optional bytes keccak256 = 1; // required
}

message PayloadHash {
  optional bytes keccak256 = 1; // required
}

message BlockHeader {
  // Sequential number of the block = parent.number + 1.
  optional uint64 number = 1; // required
  // Hash of the block payload.
  optional PayloadHash payload = 2; // required
}

message FinalBlock {
  optional bytes payload = 1; // required
  optional CommitQC justification = 2; // required
}

message View {
  reserved 1,2;
  reserved "protocol_version","fork";
  optional GenesisHash genesis = 4; // required
  optional uint64 number = 3; // required; ViewNumber
}

message ConsensusMsg {
  oneof t {// required
    ReplicaPrepare replica_prepare = 1;
    ReplicaCommit replica_commit = 2;
    LeaderPrepare leader_prepare = 3;
    LeaderCommit leader_commit = 4;
  }
}

message ReplicaPrepare {
  optional View view = 1; // required
  optional ReplicaCommit high_vote = 2; // optional 
  optional CommitQC high_qc = 3; // optional
}

message ReplicaCommit {
  optional View view = 1; // required
  optional BlockHeader proposal = 2; // required
}

message LeaderPrepare {
  optional BlockHeader proposal = 1; // required
  optional bytes proposal_payload = 2; // optional (depending on justification)
  optional PrepareQC justification = 3; // required
}

message LeaderCommit {
  optional CommitQC justification = 1; // required
}

message PrepareQC {
  optional View view = 4; // required
  repeated ReplicaPrepare msgs = 1; // required
  repeated std.BitVector signers = 2; // required
  optional AggregateSignature sig = 3; // required
}

message CommitQC {
  optional ReplicaCommit msg = 1; // required
  optional std.BitVector signers = 2; // required
  optional AggregateSignature sig = 3; // required
}

message Phase {
  oneof t {
    std.Void prepare = 1;
    std.Void commit = 2;
  }
}

// A message broadcasted by a validator
// over the gossip network announcing
// its own TCP address. Other validators
// are expected to establish a consensus
// network connection to this address.
message NetAddress {
  // Address of the validator.
  optional std.SocketAddr addr = 1; // required
  // Version of the discovery announcement.
  // Newer (higher) version overrides the older version.
  // When a validator gets restarted it broadcasts
  // its discovery message with version = 0. If it learns
  // from the network a newer version of its own discovery message
  // it immediately broadcasts another one to override the received one
  // (it may happen, since it broadcasted its discovery message also during
  // the previous execution).
  //
  // Currently the IP of the validator is static, but this scheme might also
  // be used to provide dynamic IP support (if validator discovers that its
  // own IP has changed - by pinging a trusted STUN server for example - it can
  // broadcast a new discovery message), or (multi)proxy support (a validator
  // may maintain a dynamic set of trusted proxy servers which forward traffic
  // to it - this way validator wouldn't have to have a public IP at all).
  optional uint64 version = 2; // required
  // Time at which this message has been signed.
  // Mostly an informational field:
  // we cannot use it instead of version field,
  // because the walltime clock is not guaranteed to be monotone.
  // We use it as a version "tie breaker" though:
  // we compare (version,timestamp) lexicographically to
  // decide which discovery message is newer.
  // It is useful in the following scenario:
  // 1. validator broadcasts discovery message with (version1,timestamp1)
  // 2. validator gets restarted and forgets what it has broadcasted.
  // 3. validator broadcasts discovery message with (version1,timestamp2)
  // 4. as long as timestamp1 != timestamp2, one of the messages will be considered
  //    newer and eventually all nodes will learn this message. It wouldn't be the
  //    case if both messages had exactly the same version - nodes would keep
  //    the first message that arrived and decline to broadcast the other.
  //
  // Note that although we DO NOT assume timestamps to be monotone,
  // we assume here that it is unlikely for timestamps to collide.
  // To make this reasoning more strict, we should rather use a random "tie breaker"
  // instead (replace timestamp with a random nonce, or use a hash of the entire message).
  optional std.Timestamp timestamp = 3; // required
}

message Msg {
  oneof t {// required
    ConsensusMsg consensus = 1;
    bytes session_id = 2;
    NetAddress net_address = 3;
  }
}

message MsgHash {
  optional bytes keccak256 = 1; // required
}

message Signed {
  optional Msg msg = 1; // required
  optional PublicKey key = 2; // required
  optional Signature sig = 3; // required
}

message PublicKey {
  // The name is wrong, it should be bls12_381.
  optional bytes bn254 = 1; // required
}

message Signature {
  // The name is wrong, it should be bls12_381.
  optional bytes bn254 = 1; // required
}

message AggregateSignature {
  // The name is wrong, it should be bls12_381.
  optional bytes bn254 = 1; // required
}

message WeightedValidator {
  optional PublicKey key = 1; // required
  optional uint64 weight = 2; // required
}
