// Config for the executor binary.
// Having a protobuf definition of the config allows gives
// us a backward compatibility checker (for free), which would
// be hard to obtain if it was specified just in the rust code.
//
// Executor binary expects this config in a JSON format,
// specified in https://protobuf.dev/programming-guides/proto3/#json
// You can run "cargo run -p tools --bin localnet_config" to see how
// a config should look like.
//
// Our code uses a subset of protobuf syntax, which forces us to
// mark all fields as "optional". The fields which are in fact required
// have a comment with "[required]" annotation.
// 
// For config readability and ease of use, some of the primitive types are
// encoded as strings. Fields of these types have a comment with the name of the type.
// Here is the list of string-encoded types and their corresponding string formats:
//
// IpAddr - TCP socket address, encoded as a string of the form "IP:port".
//   Both IPv4 and IPv6 are supported.
//   examples: "203.0.113.7:3456", "[2001:DB8::1]:4567"
//
// ValidatorPublicKey - public key of the validator (consensus participant) of the form "validator:public:<signature scheme>:<hex encoded key material>"
//   Currently only bn254 signature scheme is supported for validators.
//   example: "validator:public:bn254:4b0c4697f0a35eab30f63684ae4611f3c1d631eecfd97237e2345a9b3d0c472dbb16c49b793beceaab0cdd89cda6ff1099bd1aaf1ad6cabde9a15793cc09b407"
//
// NodePublicKey - public key of the node (gossip network participant) of the form "node:public:<signature scheme>:<hex encoded key material>"
//   Currently only ed25519 signature scheme is supported for nodes.
//   example: "node:public:ed25519:d36607699a0a3fbe3de16947928cf299484219ff62ca20f387795b0859dbe501"
//
// Since this application is just a (testonly) example of how to use consensus,
// the security is not that important, so for simplicity we embed the secrets into the config file:
//
// ValidatorSecretKey - secret key of the validator (consensus participant) of the form "validator:secret:<signature scheme>:<hex encoded key material>"
//   Currently only bn254 signature scheme is supported for validators.
//
// NodeSecretKey - secret key of the node (gossip network participant) of the form "node:secret:<signature scheme>:<hex encoded key material>"
//   Currently only ed25519 signature scheme is supported for nodes.
syntax = "proto3";

package zksync.tools;

import "zksync/roles/validator.proto";

// (public key, ip address) of a gossip network node. 
message NodeAddr {
  optional string key = 1; // required; NodePublicKey
  optional string addr = 2; // required; IpAddr
}

// Application configuration. 
message AppConfig {
  // Ports

  // IP:port to listen on, for incoming TCP connections.
  // Use `0.0.0.0:<port>` to listen on all network interfaces (i.e. on all IPs exposed by this VM).
  optional string server_addr = 1; // required; IpAddr
 
  // Public <IP/domain>:port which forwards to server_addr.
  optional string public_addr = 2; // required
  
  // IP:port to open a debug rpc endpoint on.
  // If not set, debug rpc endpoint won't be opened.
  optional string debug_addr = 9; // optional; IpAddr

  // IP:port to serve metrics data for scraping.
  // Use `0.0.0.0:<port>` to listen on all network interfaces.
  // If not set, metrics data won't be served.
  optional string metrics_server_addr = 3; // optional; IpAddr 

  // Consensus
  
  // Specification of the chain.
  optional roles.validator.Genesis genesis = 4; // required

  // Maximal size of the block payload.
  optional uint64 max_payload_size = 5; // required; bytes

  // Validator secret key.
  optional string validator_secret_key = 10; // optional; ValidatorSecretKey

  // Gossip network
  
  // Node secret key.
  optional string node_secret_key = 11; // required; NodeSecretKey

  // Limit on the number of gossip network inbound connections outside
  // of the `gossip_static_inbound` set.
  optional uint64 gossip_dynamic_inbound_limit = 6; // required
  // Inbound connections that should be unconditionally accepted on the gossip network.
  repeated string gossip_static_inbound = 7; // NodePublicKey
  // Outbound gossip network connections that the node should actively try to
  // establish and maintain.
  repeated NodeAddr gossip_static_outbound = 8;
}
