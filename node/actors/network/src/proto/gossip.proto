syntax = "proto3";

package zksync.network.gossip;

import "zksync/roles/node.proto";
import "zksync/roles/validator.proto";

// First message exchanged in the encrypted session.
message Handshake {
  optional roles.node.Signed session_id = 1;
  optional bool is_static = 2;
}

message SyncValidatorAddrsReq {}

message SyncValidatorAddrsResp {
  // Signed roles.validator.Msg.net_address.
  repeated roles.validator.Signed net_addresses = 1;
}

// State of the local block store.
// A node is expected to store a continuous range of blocks at all times
// and actively fetch newest blocks.
message SyncState {
  // First L2 block that the node has locally.
  optional roles.validator.CommitQC first_stored_block = 1;
  // Last L2 block that the node has locally.
  optional roles.validator.CommitQC last_stored_block = 2;
}

// Response to `SyncState` acknowledging its processing.
message SyncStateResponse {
  // intentionally empty
}

// Asks the server to send an L2 block (including its transactions).
message GetBlockRequest {
  // Number of the L2 block to send.
  optional uint64 number = 1;
}

// Response to a `GetBlockRequest`.
message GetBlockResponse {
  optional roles.validator.FinalBlock block = 1; // optional; missing if block is not available
}
